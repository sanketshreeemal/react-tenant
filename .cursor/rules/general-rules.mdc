---
description: 
globs: 
alwaysApply: true
---
# Multi-Tenant Refactoring: Best Practices and Coding Standards

**Document Purpose:** To establish coding standards and best practices for the multi-tenant refactoring project, ensuring consistency, maintainability, and minimizing the introduction of bugs.

**Introduction:**

This document outlines the coding standards and best practices that must be followed during the multi-tenant refactoring project. These guidelines will help ensure that the codebase remains clean, consistent, and maintainable.

## General Principles

1. **DO NOT DELETE CODE THAT HAS BEEN COMMENTED OUT - WILL NEED IT FOR LATER**

1.  **Single Responsibility Principle (SRP):**
    * Each function and component should have a single, well-defined responsibility.
    * Avoid creating "god functions" that perform multiple unrelated tasks.
    * Break down complex logic into smaller, reusable functions.
2.  **Don't Repeat Yourself (DRY):**
    * Avoid duplicating code.
    * Extract common logic into reusable functions or components.
    * Use utility functions and hooks to encapsulate reusable logic.
3.  **Keep it Simple, Stupid (KISS):**
    * Aim for simplicity in your code.
    * Avoid unnecessary complexity.
    * Choose the simplest solution that meets the requirements.
4.  **You Ain't Gonna Need It (YAGNI):**
    * Avoid adding features or code that you don't currently need.
    * Focus on implementing the required functionality.
5.  **Clear Naming Conventions:**
    * Use descriptive and meaningful names for variables, functions, and components.
    * Follow consistent naming conventions (e.g., camelCase for variables and functions, PascalCase for components).
6.  **Code Consistency:**
    * Adhere to the existing coding style and conventions used in the project.
    * Use a code formatter (e.g., Prettier) to ensure consistent formatting.
    * Use a linter (e.g., ESLint) to catch potential errors and enforce coding standards.
    * Create all functions within the FirestoreUtils file such that they are centralized and can be resused across the application if required. 
7.  **Thorough Testing:**
    * Write unit tests and integration tests to verify the correctness of your code.
    * Test all edge cases and error scenarios.
    * Use a testing framework (e.g., Jest, React Testing Library).
8.  **Code Reviews:**
    * Participate in code reviews to ensure code quality and consistency.
    * Provide constructive feedback to your teammates.
    * Learn from the feedback you receive.
9.  **Documentation:**
    * Document your code using comments and docstrings.
    * Explain complex logic and provide context for your code.
    * Document any changes you make to the codebase.


## Things to Avoid

1.  **Hardcoding Values:**
    * Avoid hardcoding any values that may change in the future (e.g., `landlordId`, collection names).
    * Use environment variables or configuration files for such values.
2.  **Global Variables:**
    * Avoid using global variables.
    * Use state management libraries (e.g., React Context, Redux) to manage application state.
3.  **Magic Numbers:**
    * Avoid using magic numbers in your code.
    * Use named constants instead.
4.  **Complex Logic:**
    * Avoid writing overly complex logic.
    * Break down complex logic into smaller, more manageable functions.
5.  **Ignoring Errors:**
    * Never ignore errors.
    * Handle errors gracefully and provide informative error messages to the user.
